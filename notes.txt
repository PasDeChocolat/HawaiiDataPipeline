$ irb
$ load 'client.rb' # will reload if already loaded, which is good for debugging
$ c = HGovData::Client.new(app_token: "YOUR_CLIENT_TOKEN")
$ v = c.views
$ c.list_views  # list all datasets (names of all views)
$ d = c.data_for v[0]['id']


Current dataset listing (as of 2013/3/8):
https://gist.github.com/mudphone/5123035


# $:.unshift File.dirname(__FILE__)


$stdout = File.new( '/tmp/output', 'w' )
To restore:
$stdout = STDOUT



# let's look at the death and birth rates in Hawaii
$ irb
> load 'client.rb'
> c = HGovData::Client.new
> d_death = c.data_for "xa5e-sayp"
> d_birth = c.data_for "padw-q7ep"

# let's check out the sample D3 bar graphs:
$ cd public

$ serve
OR
$ python -m SimpleHTTPServer 8008 &

# open browser to localhost:3000/birth_rate/
# open browser to localhost:3000/death_rate/
# open browser to localhost:3000/both_birth_and_death/





# MAPPING (MAC OSX INSTALL)
Loosely based on this: http://bost.ocks.org/mike/map/
$ brew install gdal
$ brew install node
$ npm install -g topojson
# put /usr/local/share/npm/bin on your path... or create links

# Create a plain old GeoJSON file (human readable, but LARGE):
$ ogr2ogr -f GeoJSON subunits.json ne_10m_admin_1_states_provinces_shp
$ ogr2ogr -f GeoJSON -where "iso_a2 = 'US' AND iso_3166_2 = 'US-HI'" subunits.json ne_10m_admin_1_states_provinces_shp

iso_a3 codes:
http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3

iso_a2 codes:
http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
ISO 3166-2:UM - United States: Baker Island, Howland Island, Jarvis Island, Johnston Atoll, Kingman Reef, Midway Islands, Navassa Island, Palmyra Atoll, and Wake Island
ISO 3166-2:US - United States

"adm1_code": "USA-3517"
"iso_3166_2": "US-HI"

....
6919:{ "type": "Feature", "properties": { "adm1_code": "USA-3517", "Shape_Leng": 13.6018738234, "Shape_Area": 1.45679695969, "diss_me": 3517, "adm1_code_": "USA-3517", "iso_3166_2": "US-HI", "wikipedia": "http:
\/\/en.wikipedia.org\/wiki\/Hawaii", "sr_sov_a3": "US1", "sr_adm0_a3": "USA", "iso_a2": "US", "adm0_sr": 8, "admin0_lab": 2, "name": "Hawaii", "name_alt": "HI|Hawaii", "name_local": null, "type": "State", "type
_en": "State", "code_local": "US15", "code_hasc": "US.HI", "note": null, "hasc_maybe": null, "region": "West", "region_cod": null, "region_big": "Pacific", "big_code": null, "provnum_ne": 0, "gadm_level": 1, "c
heck_me": 0, "scalerank": 2, "datarank": 1, "abbrev": "Hawaii", "postal": "HI", "area_sqkm": 0.0, "sameascity": -99, "labelrank": 0, "featurecla": "Admin-1 scale rank", "admin": "United States of America", "nam
e_len": 6, "mapcolor9": 1, "mapcolor13": 1 }, "geometry": { "type": "MultiPolygon", "coordinates": [ [ [ [ -155.606518969774584, 20.137955566296341 ], [ -155.586363309219308, 20.12293592315433 ], [ -155.5630978
...

$ ogr2ogr -f GeoJSON -where "iso_a2 = 'US' AND iso_3166_2 = 'US-HI'" hawaii.json ne_10m_admin_1_states_provinces_shp
$ ogr2ogr -f GeoJSON -where "iso_a2 = 'US'" us_places.json ne_10m_populated_places

"ADM1NAME": "Hawaii"

$ ogr2ogr -f GeoJSON -where "iso_a2 = 'US' AND ADM1NAME = 'Hawaii'" places.json ne_10m_populated_places

$ topojson -p name=NAME -p name -o hawaii_topojson.json subunits.json places.json

